import torch
import clip
from PIL import Image
import gradio as gr
from pyngrok import ngrok, conf
import time
import psutil
import torch.cuda as cuda

# C·∫•u h√¨nh ngrok
conf.get_default().auth_token = "317ev8ZpU7k891jccnXABQOPzLw_3Tvcts8KSEC8Drs4c4Uzb"

# Load CLIP model
device = "cuda" if torch.cuda.is_available() else "cpu"
model, preprocess = clip.load("RN50", device=device)
model.eval()

def get_memory_usage():
    """L·∫•y th√¥ng b·ªô nh·ªõ CPU/GPU theo GB"""
    # RAM (GB)
    ram_gb = psutil.virtual_memory().used / (1024 ** 3)
    
    # VRAM (GB)
    if device == "cuda":
        vram_gb = cuda.memory_allocated() / (1024 ** 3)
    else:
        vram_gb = 0
    
    return ram_gb, vram_gb

def compare_images(img1, img2, threshold=0.85):
    """T√≠nh to√°n ƒë·ªô t∆∞∆°ng ƒë·ªìng v√† th·ªùi gian x·ª≠ l√Ω"""
    
    
    # L·∫•y th√¥ng s·ªë b·ªô nh·ªõ tr∆∞·ªõc khi x·ª≠ l√Ω
    ram_before, vram_before = get_memory_usage()
    
    # Ti·ªÅn x·ª≠ l√Ω ·∫£nh
    img1_pre = preprocess(img1).unsqueeze(0).to(device)
    img2_pre = preprocess(img2).unsqueeze(0).to(device)
    start_time = time.time()
    # T√≠nh to√°n ƒë·ªô t∆∞∆°ng ƒë·ªìng
    with torch.no_grad():
        features1 = model.encode_image(img1_pre)
        features2 = model.encode_image(img2_pre)
        similarity = torch.cosine_similarity(features1, features2).item()
    
    # T√≠nh to√°n th·ªùi gian v√† b·ªô nh·ªõ
    latency_ms = (time.time() - start_time) * 1000
    ram_after, vram_after = get_memory_usage()
    
    # T·∫°o b√°o c√°o
    report = f"""
    ## üìä K·∫øt qu·∫£ so s√°nh ·∫£nh
    - **ƒê·ªô t∆∞∆°ng ƒë·ªìng**: {similarity*100:.2f}%
    - **Th·ªùi gian x·ª≠ l√Ω**: {latency_ms:.2f} ms
    
    ## üñ•Ô∏è B·ªô nh·ªõ s·ª≠ d·ª•ng
    - **RAM**: {max(ram_before, ram_after):.2f} GB
    - **VRAM**: {max(vram_before, vram_after):.2f} GB
    """
    return report

# T·∫°o giao di·ªán
demo = gr.Interface(
    fn=compare_images,
    inputs=[
        gr.Image(type="pil", label="·∫¢nh 1"),
        gr.Image(type="pil", label="·∫¢nh 2"),
        gr.Slider(0.5, 1.0, value=0.85, label="Ng∆∞·ª°ng t∆∞∆°ng ƒë·ªìng")
    ],
    outputs=gr.Markdown(label="K·∫øt qu·∫£"),
    title="üñºÔ∏è So s√°nh ·∫£nh b·∫±ng AI"
)

# Ch·∫°y ·ª©ng d·ª•ng
if __name__ == "__main__":
    public_url = ngrok.connect(7860)
    print("üëâ Public URL:", public_url)
    demo.launch(server_name="0.0.0.0", server_port=7860)